#
# Copyright(c) 2008 Imagination Technologies Ltd. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
# 
# This program is distributed in the hope it will be useful but, except 
# as otherwise stated in writing, without any warranty; without even the 
# implied warranty of merchantability or fitness for a particular purpose. 
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
# 
# The full GNU General Public License is included in this distribution in
# the file called "COPYING".
#
# Contact Information:
# Imagination Technologies Ltd. <gpl-support@imgtec.com>
# Home Park Estate, Kings Langley, Herts, WD4 8LZ, UK 
# 
#
# 
#  --- Revision Logs Removed --- 
# 
##################################################################################

# ENV is used in a few other makefiles instead of the literal 'linux', for
# reasons of portability, presumably.  It's common to all of the linux makeconf
# files (usually build/*/makeconf.build) so now lives.
#
ENV				?= linux

# Compilers and other such tools
#
AR  			= $(CROSS_COMPILE)ar
AS				= $(CROSS_COMPILE)as
#CC				= $(CROSS_COMPILE)gcc
CPP				= $(CROSS_COMPILE)g++
LD				= $(CROSS_COMPILE)ld
OBJCOPY 		= $(CROSS_COMPILE)objcopy
OBJDUMP			= $(CROSS_COMPILE)objdump
RANLIB			= $(CROSS_COMPILE)ranlib
STRIP			= $(CROSS_COMPILE)strip
SIZE			= $(CROSS_COMPILE)size

CC= $(CROSS_COMPILE)gcc
ifdef QAC_ANALYSE
export QAC_SYS_INC_PATH ?= $(shell $(CROSS_COMPILE)gcc -print-file-name=include)

#ifneq ("$(CROSS_COMPILE)","")
#CC= perl "$(ANALROOT)/wrapper.pl -wcf $(ANALROOT)/eurasia_linux.cfg $(CROSS_COMPILE)gcc"
#endif
endif

CAT				?= cat
CP				?= cp
CHMOD			?= chmod
CUT				?= cut
DIFF			?= diff
ECHO			?= -@echo
ENV				?= env
FIND			?= find
GREP			?= grep
LN				?= ln -s
NM				?= nm
MKDIR			?= mkdir -p
MV				?= mv
RM				?= rm -f
SED				?= sed
M4				?= m4
TOUCH			?= touch
PERL			?= perl
SORT			?= sort
UNIQ			?= uniq
FLEX			?= flex
BISON			?= bison
MD5SUM			?= md5sum
GAWK			?= gawk

# The `dos2unix' package is missing from Ubuntu 10.04. Additionally,
# the tofrodos package no longer provides the dos2unix symlink.
#
DOS2UNIX		?= \
	$(shell if [ -z `which fromdos` ]; then echo dos2unix; else echo fromdos -p; fi)

# SILENT=@ causes command text to be omitted during the process.  If you want
# to see what's really happening then use "make SILENT= ..."
#
SILENT			= @

# V=1 is equivalent to SILENT=
# (Noteably it is the same variable used by the Linux kbuild scripts, so hopfully
# intuative to those familiar with kbuild)
ifeq ($(V),1)
SILENT			=
endif

# BUILD=release sets the default release.
#
BUILD			?= release

# Services module name
PVRSRV_MODNAME ?= pvrsrvkm

SYS_CFLAGS += -DPVRSRV_MODNAME="\"$(PVRSRV_MODNAME)"\"

# Services version. 
#
SERVICES ?= 4
export SERVICES

# Minor convenience variables
#
DO_MKDIR		= $(SILENT)$(MKDIR) $@
DO_LN_S			= $(SILENT)$(LN) -s $< $@

# MAKE_OPT defaults to --no-print-directory to declutter the build output.
#
MAKE_OPT		?= --no-print-directory

# Useful (important) directories for the build.
#
BIN				= bin_$(PVR_BUILD_DIR)_$(BUILD)_$(MODULE)
TMP 			= tmp_$(PVR_BUILD_DIR)_$(BUILD)_$(MODULE)
_SYSBIN  		= $(EURASIAROOT)/eurasiacon/binary
SYSBIN  		= $(_SYSBIN)_$(PVR_BUILD_DIR)_$(BUILD)

# Work out our origins.  eurasiacon.pj is not supplied to end-users
# so instead we supply pvrversion.h.  We produce pvrversion.h if
# if doesn't exist.
#
DATE			:= $(shell date +%Y-%m-%d)
EURASIACON_PJ	= $(EURASIAROOT)/eurasiacon.pj
PVRVERSION_H	= $(EURASIAROOT)/include$(SERVICES)/pvrversion.h
PVRVERSION		= $(shell if [ -f $(EURASIACON_PJ) ]; then \
						$(GREP) "\$Revision" $(EURASIACON_PJ) |\
						$(SED) "s,.* \([0-9.]*\) .*,\1,"; \
					else \
						$(GREP) "PVRVERSION_STRING" < $(PVRVERSION_H) | $(SED) "s,.*\"\([0-9.]*\)\".*,\1,"; \
					fi)
PVRVERSION_MAJ		= $(shell echo $(PVRVERSION) | $(CUT) -d '.' -f1)
PVRVERSION_MIN		= $(shell echo $(PVRVERSION) | $(CUT) -d '.' -f2)
PVRVERSION_BRANCH	= $(shell echo $(PVRVERSION) | $(CUT) -d '.' -f3)
PVRVERSION_BUILD	= $(shell echo $(PVRVERSION) | $(CUT) -d '.' -f4,5,6)

# Linux kernel defines
#
KERNEL_VER		= $(shell grep "^VERSION = " \
	 				$(KERNELDIR)/Makefile | $(CUT) -f3 -d' ')
KERNEL_REL		= $(shell grep "^PATCHLEVEL = " \
	 				$(KERNELDIR)/Makefile | $(CUT) -f3 -d' ')
KERNEL_SUBREL		= $(shell grep "^SUBLEVEL = " \
	 				$(KERNELDIR)/Makefile | $(CUT) -f3 -d' ')

KERNEL_EXTRAVER		= $(shell grep "^EXTRAVERSION = " \
	 				$(KERNELDIR)/Makefile | $(CUT) -f3 -d' ')

KERNELVERSION	= $(KERNEL_VER).$(KERNEL_REL).$(KERNEL_SUBREL)

KERNEL_ID		?= $(shell grep -h '\#define UTS_RELEASE' $(KERNELDIR)/include/linux/* | \
				$(CUT) -f3 -d' ' | \
				$(SED) s/\"//g)

ifeq ("$(KERNEL_ID)", "")
# For Linux 2.6.33, the above method of finding the KERNEL ID no longer
# works, as UTS_RELEASE is no longer defined anywhere.
KERNEL_ID		:= $(KERNELVERSION)$(KERNEL_EXTRAVER)
endif

# Get checksum from env variables
#
ENV_CHECKSUM	=	$(shell echo $(ALL_CFLAGS_$(MODSUFFIX)) | $(MD5SUM) - | $(CUT) -d' ' -f 1)

# Linux kernel defines
#
ifeq ("$(KERNEL_VER)", "2")
ifeq ("$(KERNEL_REL)", "6")
KM_SUFFIX		= ko
else
KM_SUFFIX		= o
CFLAGS_.o	+= -DEXPORT_SYMTAB $(CFLAGS_.ko)
endif
else 
KM_SUFFIX		= o
endif

# The standard CFLAGS macro can be overridden on the 'make' command line.  We
# put CBUILD in a separate macro so its setting doesn't get lost when a user
# *does* override CFLAGS.
#

CBUILD			=	-DPVR_BUILD_DIR="\"$(PVR_BUILD_DIR)\"" \
					-DPVR_BUILD_DATE="\"$(DATE)\"" \
					-DPVR_BUILD_TYPE="\"$(BUILD)\""

#  Don't support HW recovery on debug builds
CBUILD.debug	= -DDEBUG
CBUILD.timing	= -DTIMING
CBUILD.release	= -DRELEASE
CFLAGS.debug	= -g -O0 -DDLL_METRIC=1
CFLAGS.timing	= $(OPTIM) -g -DDLL_METRIC=1 -DTIMING
CFLAGS.release	= $(OPTIM) -g

# If either EXTRA_WARNINGS or EXTRA_EXTRA_WARNINGS are enabled,
# modify the base flags (CCFLAGS_KERNEL).
#
ifeq ($(EXTRA_EXTRA_WARNINGS),1)
EXTRA_WARNINGS=1
endif
ifeq ($(EXTRA_WARNINGS),1)
CCFLAGS_KERNEL	+=
ifeq ($(EXTRA_EXTRA_WARNINGS),1)
CCFLAGS_KERNEL	+= -Wwrite-strings
endif
endif

# These flags are enabled unconditionally for both UM/KM parts.
#
CCFLAGS_KERNEL	+= -Wall -Wdeclaration-after-statement -Wpointer-arith
CCFLAGS_KERNEL	+= -Wmissing-format-attribute -Wno-format-zero-length
CCFLAGS_KERNEL	+= -Wmissing-prototypes -Wstrict-prototypes

# These are just for UM builds.
#
CCFLAGS			:= $(CCFLAGS_KERNEL) -Wunused-parameter

# Snapshot host flags without -W -Wno-missing-field-initializers
# FIXME: Temporary workaround for ancient centos4 toolchain..
#
CCFLAGS_HOST	:= $(CCFLAGS)

# Our platform guides require the use of either GCC 4.2 for x86,
# or GCC 4.3 for ARM. Both of these compilers support "-W
# -Wno-missing-field-initializers", and support switching off each
# of the warnings -W enables.
#
# Because earlier GCCs don't support these flags, or don't support
# them properly, we can't enable them for kernel builds because
# there may be bugs in kernel headers which we can't work around.
#
CCFLAGS			+= -W -Wno-missing-field-initializers

# These flags are used to work around kernel header bugs.
#
CCFLAGS_KERNEL	+= -Wno-unused-parameter -Wno-sign-compare

# We have no control over errors in external sources, so no
# additional error checking if SUPPORT_DRI_DRM_EXT is set.
#
ifneq ($(SUPPORT_DRI_DRM_EXT),1)
# If EXTRA_WARNINGS are enabled, we don't want any -Werror
# to cause the build to fail, so turn it back off again.
#
# Otherwise, turn Werror on for all kernel module builds.
#
ifeq ($(EXTRA_WARNINGS),1)
SYS_CFLAGS		+= -Wno-error
else
CCFLAGS_KERNEL	+= -Werror
endif
endif

# CPPFLAGS are default compiler flags for C++ (subset of C flags)
#
CPPFLAGS  = -W -Wall -Wmissing-format-attribute -Wpointer-arith
CPPFLAGS += -Wno-missing-field-initializers

# Defaults for useful things.
#

ifeq ("$(BUILD)", "debug")
DEBUG_LINUX_MEMORY_ALLOCATIONS ?= 1
DEBUG_LINUX_MEM_AREAS ?= 1
DEBUG_LINUX_MMAP_AREAS ?= 1
DEBUG_LINUX_XML_PROC_FILES ?= 0
DEBUG_LINUX_SLAB_ALLOCATIONS ?= 0
DEBUG_BRIDGE_KM ?= 1
DEBUG_TRACE_BRIDGE_KM ?= 0
DEBUG_BRIDGE_KM_DISPATCH_TABLE ?= 0
PVRSRV_LOG_MEMORY_ALLOCS ?= 0
PVRSRV_DEBUG_OS_MEMORY ?= 0
endif

SUPPORT_XORG ?= 0
ifneq ($(SUPPORT_XORG),1)
SUPPORT_XWS	   ?= 1
XWS_SERVER_ONLY	   ?= 0
else
SUPPORT_XWS	   = 0
XWS_SERVER_ONLY	   = 0
SUPPORT_EWS	   = 0
endif

SUPPORT_DRI_DRM ?= $(SUPPORT_XORG)
SUPPORT_DRI_DRM_EXT ?= 0
SUPPORT_DRI_DRM_NOT_PCI ?= 0
SUPPORT_DRI_DRM_NO_DROPMASTER ?= 0
SUPPORT_SECURE_DRM_AUTH_EXPORT ?= $(SUPPORT_XORG)

ifeq ($(SUPPORT_EWS),1)
SUPPORT_SECURE_FD_EXPORT	?= 1
else
SUPPORT_SECURE_FD_EXPORT	?= 0
endif

SUPPORT_DRI_DRM_NO_LIBDRM ?= 0
ifneq ($(SUPPORT_XORG),1)
ifeq ($(SUPPORT_DRI_DRM),1)
SUPPORT_DRI_DRM_NO_LIBDRM = 1
endif
endif

TRANSFER_QUEUE ?= 1
SUPPORT_SGX_EVENT_OBJECT ?=1
SUPPORT_SECURE_HANDLES		= 1
SUPPORT_SRVINIT = 1
SUPPORT_PERCONTEXT_PB = 1
DISABLE_SGX_PB_GROW_SHRINK ?= 0
SUPPORT_LINUX_X86_PAT ?=1
SUPPORT_LINUX_X86_WRITECOMBINE ?=1
SUPPORT_SGX_LOW_LATENCY_SCHEDULING ?=1

ifeq ($(SUPPORT_XORG),1)
SUPPORT_PDUMP_MULTI_PROCESS = 1
endif

SUPPORT_OMAP3430_SGXFCLK_96M ?= 0

SUPPORT_MEMINFO_IDS ?= 0

SUPPORT_PVR_PDP_LINUX_FB ?= $(SUPPORT_XWS)

SUPPORT_LINUX_USING_WORKQUEUES ?= 0
SUPPORT_LINUX_USING_SHARED_WORKQUEUES ?= 0
ifeq ($(SUPPORT_LINUX_USING_WORKQUEUES),1)
SUPPORT_LINUX_USING_SHARED_WORKQUEUES = 0
endif

SUPPORT_SGX_NEW_STATUS_VALS ?= 1

DC_NOHW_WIDTH ?= 640
DC_NOHW_HEIGHT ?= 480

DISPLAY_CONTROLLER ?=

SUPPORT_DYNAMIC_GTF_TIMING ?= 0

SYS_CFLAGS += -DSERVICES4 -D_XOPEN_SOURCE=600 -D_POSIX_C_SOURCE=199309 -DPVR2D_VALIDATE_INPUT_PARAMS

# Thread support
USE_PTHREADS ?= 1
USE_GCC__thread_KEYWORD ?= 0
OPTIMISE_NON_NPTL_SINGLE_THREAD_TLS_LOOKUP ?= 0
DISABLE_THREADS ?= 0

# Automatically define C compiler macros for features possible (or not) in use.

SYS_CFLAGS.$(SUPPORT_SRVINIT)				+= -DSUPPORT_SRVINIT

SYS_CFLAGS.$(SUPPORT_SGX)					+= -DSUPPORT_SGX
SYS_CFLAGS.$(SUPPORT_VGX)					+= -DSUPPORT_VGX
SYS_CFLAGS.$(SUPPORT_XWS)					+= -DSUPPORT_XWS
SYS_CFLAGS.$(SUPPORT_EWS)					+= -DSUPPORT_EWS
SYS_CFLAGS.$(PDUMP)							+= -DPDUMP
SYS_CFLAGS.$(VGX_PDUMP_FROM_FIRMWARE)		+= -DVGX_PDUMP_FROM_FIRMWARE
SYS_CFLAGS.$(OVG_ALWAYS_CONVERT_DATA)		+= -DOVG_ALWAYS_CONVERT_DATA
SYS_CFLAGS.$(SUPPORT_POWER_MANAGEMENT)		+= -DSUPPORT_POWER_MANAGEMENT
SYS_CFLAGS.$(SUPPORT_BUFFER_CLASS)			+= -DSUPPORT_BUFFER_CLASS

SYS_CFLAGS.$(SUPPORT_PERCONTEXT_PB)			+= -DSUPPORT_PERCONTEXT_PB 
SYS_CFLAGS.$(DISABLE_SGX_PB_GROW_SHRINK)	+= -DDISABLE_SGX_PB_GROW_SHRINK

SYS_CFLAGS.$(USE_FBDEV)						+= -DUSE_FBDEV
SYS_CFLAGS.$(USE_FBDEV)						+= -DFBDEV_NAME="\"$(FBDEV_NAME)\""
SYS_CFLAGS.$(SUPPORT_DYNAMIC_3DCLOCKGATING) += -DSUPPORT_DYNAMIC_3DCLOCKGATING
SYS_CFLAGS.$(REENTRANCY_PROTECTION)			+= -DREENTRANCY_PROTECTION
SYS_CFLAGS.$(SCHEDULER_CONTROL_SUPPORT) 	+= -DSCHEDULER_CONTROL_SUPPORT
SYS_CFLAGS.$(USE_IMG_POWER_DOMAIN_FUNCTION) += -DUSE_IMG_POWER_DOMAIN_FUNCTION

SYS_CFLAGS.$(USE_DMALLOC)					+= -DDMALLOC

SYS_CFLAGS.$(DEBUG_LINUX_MEMORY_ALLOCATIONS)	+= -DDEBUG_LINUX_MEMORY_ALLOCATIONS
SYS_CFLAGS.$(DEBUG_LINUX_MEM_AREAS)				+= -DDEBUG_LINUX_MEM_AREAS
SYS_CFLAGS.$(DEBUG_LINUX_MMAP_AREAS)			+= -DDEBUG_LINUX_MMAP_AREAS
SYS_CFLAGS.$(DEBUG_LINUX_XML_PROC_FILES)		+= -DDEBUG_LINUX_XML_PROC_FILES
SYS_CFLAGS.$(DEBUG_LINUX_SLAB_ALLOCATIONS)		+= -DDEBUG_LINUX_SLAB_ALLOCATIONS
SYS_CFLAGS.$(DEBUG_BRIDGE_KM)					+= -DDEBUG_BRIDGE_KM
SYS_CFLAGS.$(DEBUG_TRACE_BRIDGE_KM)				+= -DDEBUG_TRACE_BRIDGE_KM
SYS_CFLAGS.$(DEBUG_BRIDGE_KM_DISPATCH_TABLE)	+= -DDEBUG_BRIDGE_KM_DISPATCH_TABLE
SYS_CFLAGS.$(PVRSRV_LOG_MEMORY_ALLOCS)			+= -DPVRSRV_LOG_MEMORY_ALLOCS
SYS_CFLAGS.$(PVRSRV_DEBUG_OS_MEMORY)			+= -DPVRSRV_DEBUG_OS_MEMORY
SYS_CFLAGS.$(DEBUG_MESA_OGL_TRACE)				+= -DDEBUG_MESA_OGL_TRACE

SYS_CFLAGS.$(SUPPORT_LINUX_X86_WRITECOMBINE)	+= -DSUPPORT_LINUX_X86_WRITECOMBINE

SYS_CFLAGS.$(SGX_PDS_EVENTS_DISABLED)			+= -DSGX_PDS_EVENTS_DISABLED
SYS_CFLAGS.$(USE_SUPPORT_NO_TA3D_OVERLAP)		+= -DUSE_SUPPORT_NO_TA3D_OVERLAP
SYS_CFLAGS.$(SUPPORT_SGX_TILING)				+= -DSUPPORT_SGX_TILING
SYS_CFLAGS.$(TRANSFER_QUEUE)					+= -DTRANSFER_QUEUE

SYS_CFLAGS.$(SUPPORT_SGX_MMU_DUMMY_PAGE)		+= -DSUPPORT_SGX_MMU_DUMMY_PAGE
SYS_CFLAGS.$(PVRSRV_DUMP_MK_TRACE)			+= -DPVRSRV_DUMP_MK_TRACE
SYS_CFLAGS.$(PVRSRV_DUMP_KERNEL_CCB)			+= -DPVRSRV_DUMP_KERNEL_CCB
SYS_CFLAGS.$(EDM_USSE_HWDEBUG)				+= -DEDM_USSE_HWDEBUG

SYS_CFLAGS.$(PVRSRV_USSE_EDM_STATUS_DEBUG)		+= -DPVRSRV_USSE_EDM_STATUS_DEBUG
SYS_CFLAGS.$(USE_SUPPORT_STATUSVALS_DEBUG)		+= -DUSE_SUPPORT_STATUSVALS_DEBUG
SYS_CFLAGS.$(SGX_FAST_DPM_INIT)				+= -DSGX_FAST_DPM_INIT
SYS_CFLAGS.$(SGX_DISABLE_UKERNEL_SECONDARY_STATE)	+= -DSGX_DISABLE_UKERNEL_SECONDARY_STATE
SYS_CFLAGS.$(DBGBREAK_ON_SPM)				+= -DDBGBREAK_ON_SPM
SYS_CFLAGS.$(PVR_DBG_BREAK_ASSERT_FAIL)			+= -DPVR_DBG_BREAK_ASSERT_FAIL

SYS_CFLAGS.$(PVRSRV_RESET_ON_HWTIMEOUT)			+= -DPVRSRV_RESET_ON_HWTIMEOUT
SYS_CFLAGS.$(PVRSRV_CLIENT_RESET_ON_HWTIMEOUT)	+= -DPVRSRV_CLIENT_RESET_ON_HWTIMEOUT
SYS_CFLAGS.$(NO_HARDWARE)						+= -DNO_HARDWARE

SYS_CFLAGS.$(SUPPORT_DRI_DRM)					+= -DSUPPORT_DRI_DRM
SYS_CFLAGS.$(SUPPORT_DRI_DRM_EXT)				+= -DSUPPORT_DRI_DRM_EXT
SYS_CFLAGS.$(SUPPORT_DRI_DRM_NOT_PCI)				+= -DPVR_DRI_DRM_NOT_PCI
SYS_CFLAGS.$(SUPPORT_DRI_DRM_NO_DROPMASTER)		+= -DSUPPORT_DRI_DRM_NO_DROPMASTER
SYS_CFLAGS.$(SUPPORT_DRI_DRM_NO_LIBDRM)				+= -DSUPPORT_DRI_DRM_NO_LIBDRM
SYS_CFLAGS.$(DRM_PVR_RESERVED_INTEL_ORDER) 		+= -DDRM_PVR_RESERVED_INTEL_ORDER
SYS_CFLAGS.$(DRM_PVR_USE_INTEL_FB) 				+= -DDRM_PVR_USE_INTEL_FB


SYS_CFLAGS.$(USE_PRIMARY_SURFACE_IN_FLIP_CHAIN) += -DUSE_PRIMARY_SURFACE_IN_FLIP_CHAIN

ifneq ("$(NO_HARDWARE)", "1")
SYS_CFLAGS.$(SYS_USING_INTERRUPTS)		+= -DSYS_USING_INTERRUPTS
SYS_CFLAGS.$(SUPPORT_HW_RECOVERY)		+= -DSUPPORT_HW_RECOVERY
SYS_CFLAGS.$(SUPPORT_ACTIVE_POWER_MANAGEMENT)	+= -DSUPPORT_ACTIVE_POWER_MANAGEMENT
endif

ifeq ("$(PDUMP)", "1")
SUPPORT_DBGDRV_EVENT_OBJECTS ?=1
SYS_CFLAGS.$(SUPPORT_DBGDRV_EVENT_OBJECTS)	+= -DSUPPORT_DBGDRV_EVENT_OBJECTS
SYS_CFLAGS.$(PDUMP_DEBUG_OUTFILES)			+= -DPDUMP_DEBUG_OUTFILES
SYS_CFLAGS.$(SUPPORT_PDUMP_MULTI_PROCESS)	+= -DSUPPORT_PDUMP_MULTI_PROCESS
endif

SYS_CFLAGS.$(SUPPORT_SECURE_HANDLES)	+= -DPVR_SECURE_HANDLES
SYS_CFLAGS.$(SUPPORT_SECURE_FD_EXPORT)	+= -DPVR_SECURE_FD_EXPORT
SYS_CFLAGS.$(SUPPORT_SECURE_DRM_AUTH_EXPORT)	+= -DPVR_SECURE_DRM_AUTH_EXPORT

SYS_CFLAGS.$(USE_PTHREADS)				+= -DUSE_PTHREADS
SYS_CFLAGS.$(USE_GCC__thread_KEYWORD)	+= -DUSE_GCC__thread_KEYWORD
SYS_CFLAGS.$(OPTIMISE_NON_NPTL_SINGLE_THREAD_TLS_LOOKUP) += -DOPTIMISE_NON_NPTL_SINGLE_THREAD_TLS_LOOKUP
SYS_CFLAGS.$(DISABLE_THREADS)			+= -DDISABLE_THREADS
SYS_CFLAGS.$(SUPPORT_SGX_EVENT_OBJECT)			+= -DSUPPORT_SGX_EVENT_OBJECT
SYS_CFLAGS.$(LDM_PLATFORM)			+= -DLDM_PLATFORM
SYS_CFLAGS.$(LDM_PCI)				+= -DLDM_PCI
SYS_CFLAGS.$(PVR_MANUAL_POWER_CONTROL)		+= -DPVR_MANUAL_POWER_CONTROL

SYS_CFLAGS.$(PVR2D_ALT_2DHW)			+= -DPVR2D_ALT_2DHW

SYS_CFLAGS.$(SUPPORT_SGX_HWPERF)		+= -DSUPPORT_SGX_HWPERF

SYS_CFLAGS.$(SUPPORT_SLC)				+= -DSGX_FEATURE_SYSTEM_CACHE
SYS_CFLAGS.$(BYPASS_SLC)				+= -DSGX_BYPASS_SYSTEM_CACHE
SYS_CFLAGS.$(BYPASS_DCU)				+= -DSGX_BYPASS_DCU
SYS_CFLAGS.$(SUPPORT_SGX_LOW_LATENCY_SCHEDULING)				+= -DSUPPORT_SGX_LOW_LATENCY_SCHEDULING
SYS_CFLAGS.$(SGX_SUPPORT_VDM_TIMER_BASED_SWITCHING)	+= -DSGX_SUPPORT_VDM_TIMER_BASED_SWITCHING
SYS_CFLAGS.$(SGX_SUPPORT_ISP_TIMER_BASED_SWITCHING)	+= -DSGX_SUPPORT_ISP_TIMER_BASED_SWITCHING

SYS_CFLAGS.$(SUPPORT_LINUX_X86_PAT)			+= -DSUPPORT_LINUX_X86_PAT

SYS_CFLAGS.$(SUPPORT_OMAP3430_SGXFCLK_96M)	+= -DSUPPORT_OMAP3430_SGXFCLK_96M
SYS_CFLAGS.$(SUPPORT_CACHEFLUSH_ON_ALLOC)	+= -DSUPPORT_CACHEFLUSH_ON_ALLOC
SYS_CFLAGS.$(SUPPORT_MEMINFO_IDS)			+= -DSUPPORT_MEMINFO_IDS

SYS_CFLAGS.$(SUPPORT_SGX_EDM_MEMORY_DEBUG)	+= -DSUPPORT_SGX_EDM_MEMORY_DEBUG

SYS_CFLAGS.$(SUPPORT_ANDROID_PLATFORM)		+= -DSUPPORT_ANDROID_PLATFORM
SYS_CFLAGS.$(SUPPORT_GRAPHICS_HAL)			+= -DSUPPORT_GRAPHICS_HAL
SYS_CFLAGS.$(SUPPORT_GRAPHICS_HAL)			+= -DGRALLOC_VARIANT="\"$(GRALLOC_VARIANT)\""

SYS_CFLAGS.$(SUPPORT_EGL_IMAGE_SYNC_DEPENDENCY)			+= -DSUPPORT_EGL_IMAGE_SYNC_DEPENDENCY

SYS_CFLAGS.$(SUPPORT_PVR_PDP_LINUX_FB) += -DPVR_PDP_LINUX_FB

SYS_CFLAGS.$(SUPPORT_LINUX_USING_WORKQUEUES) += \
				-DPVR_LINUX_USING_WORKQUEUES \
				-DPVR_LINUX_MISR_USING_PRIVATE_WORKQUEUE \
				-DPVR_LINUX_TIMERS_USING_WORKQUEUES \
				-DSYS_CUSTOM_POWERLOCK_WRAP

SYS_CFLAGS.$(SUPPORT_LINUX_USING_SHARED_WORKQUEUES) += \
				-DPVR_LINUX_USING_WORKQUEUES \
				-DPVR_LINUX_MISR_USING_WORKQUEUE \
				-DPVR_LINUX_TIMERS_USING_SHARED_WORKQUEUE \
				-DSYS_CUSTOM_POWERLOCK_WRAP

SYS_CFLAGS.$(SUPPORT_SGX_NEW_STATUS_VALS)	+= -DSUPPORT_SGX_NEW_STATUS_VALS

ifneq ("$(DISPLAY_CONTROLLER)", "")
SYS_CFLAGS += -DDISPLAY_CONTROLLER=$(DISPLAY_CONTROLLER)
endif

ifeq ("$(PVR_SYSTEM)", "sgx_nohw")
ifndef RTSIM
SYS_CFLAGS += -DNO_HARDWARE
endif
SYS_CFLAGS += -DDC_NOHW_BUFFER_WIDTH=$(DC_NOHW_WIDTH) -DDC_NOHW_BUFFER_HEIGHT=$(DC_NOHW_HEIGHT)
endif

ifeq ("$(PVR_SYSTEM)", "vgx_nohw")
SYS_CFLAGS += -DNO_HARDWARE -DDC_NOHW_BUFFER_WIDTH=$(DC_NOHW_WIDTH) -DDC_NOHW_BUFFER_HEIGHT=$(DC_NOHW_HEIGHT)
endif

SYS_CFLAGS += -DDEBUG_LOG_PATH_TRUNCATE=\"$(EURASIAROOT)\"

SYS_INCLUDES	=	-I$(EURASIAROOT)/include4 \
					-I$(EURASIAROOT)/eurasiacon/includeext \
					-I$(SYSBIN) \
					-isystem $(KERNELDIR)/include


ALL_CFLAGS_kbuild	=	$(CCFLAGS_KERNEL) -DLINUX \
						$(CBUILD) $(CBUILD.$(BUILD)) \
						$(MODULE_CFLAGS) $(MODULE_CFLAGS.$(BUILD)) \
						$(SYS_CFLAGS) $(SYS_CFLAGS.1) \
						$(CORE) -fno-strict-aliasing -Wno-pointer-arith \
						$(CFLAGS.$(BUILD))

ifdef SUPPORT_DRI_DRM_NO_TTM
export SUPPORT_DRI_DRM_NO_TTM
endif

ifdef SUPPORT_XORG_SENSOR_FRAMEWORK
export SUPPORT_XORG_SENSOR_FRAMEWORK
endif

# If we do not specify direst path to external 3pdd sources, use tarball
ifeq ($(MRST_DRIVER_SOURCE),)
EXTERNAL_3PDD_TARBALL_PATH = $(EURASIAROOT)/eurasiacon/external/$(EXTERNAL_3PDD_TARBALL)
export EXTERNAL_3PDD_TARBALL_PATH
endif


